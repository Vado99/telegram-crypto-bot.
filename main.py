import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import ccxt
import pandas as pd
import ta  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ta –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
import requests
from textblob import TextBlob
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import os  # –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è Heroku
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_KEY = os.getenv('API_KEY')
API_SECRET = os.getenv('API_SECRET')
TWITTER_API_KEY = os.getenv('TWITTER_API_KEY')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ ByBit —á–µ—Ä–µ–∑ CCXT
logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ ByBit —á–µ—Ä–µ–∑ CCXT.")
exchange = ccxt.bybit({
    'apiKey': API_KEY,
    'secret': API_SECRET,
})

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ Telegram
async def notify_error(context: CallbackContext, error_message: str):
    try:
        chat_id = context.job.context['chat_id'] if context and context.job and context.job.context else None
        if chat_id:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_message}")
        logger.error(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {error_message}")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–∏–Ω–∫—ñ–≤ (—Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä)
def get_all_markets():
    try:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–∏–Ω–∫—ñ–≤.")
        markets = exchange.load_markets()
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–∏–Ω–∫–∏: {markets}")
        return [symbol for symbol in markets if '/USDT' in symbol]  # –ê–Ω–∞–ª—ñ–∑ —Ç—ñ–ª—å–∫–∏ –ø–∞—Ä –¥–æ USDT
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
def get_market_data(symbol, timeframe):
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è {symbol} –∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {timeframe}.")
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è {symbol}.")
        return df
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
        return None

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
def add_indicators(df):
    try:
        logger.info("–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤.")
        df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
        bb = ta.volatility.BollingerBands(df['close'], window=20)
        df['upper_band'] = bb.bollinger_hband()
        df['middle_band'] = bb.bollinger_mavg()
        df['lower_band'] = bb.bollinger_lband()
        macd = ta.trend.MACD(df['close'])
        df['macd'] = macd.macd()
        df['macd_signal'] = macd.macd_signal()
        stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'])
        df['stoch'] = stoch.stoch()
        df['cci'] = ta.trend.CCIIndicator(df['high'], df['low'], df['close'], window=20).cci()
        df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
        
        logger.info("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ.")
        return df
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
        return df

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –®–Ü –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
def train_model(df):
    try:
        logger.info("–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
        df = add_indicators(df)
        df['price_change'] = df['close'].pct_change().shift(-1) * 100  # –ü—Ä–æ–≥–Ω–æ–∑ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        df = df.dropna()

        X = df[['rsi', 'upper_band', 'lower_band', 'macd', 'macd_signal', 'stoch', 'cci', 'atr']]
        y = df['price_change']

        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, shuffle=False)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ RandomForestRegressor –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        model = RandomForestRegressor(n_estimators=200, random_state=42)
        model.fit(X_train, y_train)

        r_squared = model.score(X_test, y_test)
        logger.info(f"R¬≤ –º–æ–¥–µ–ª—ñ: {r_squared * 100:.2f}%")

        return model, scaler
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {e}")
        return None, None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
def predict_price_change(model, scaler, df):
    try:
        logger.info("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏.")
        df = add_indicators(df)
        X_new = df[['rsi', 'upper_band', 'lower_band', 'macd', 'macd_signal', 'stoch', 'cci', 'atr']].tail(1).dropna()
        X_scaled = scaler.transform(X_new)

        prediction = model.predict(X_scaled)[0]
        logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {prediction:.2f}%")
        return prediction
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏: {e}")
        return 0

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
def calculate_risk_management(price, predicted_change):
    try:
        logger.info("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É.")
        stop_loss = price * (1 - 0.02)  # Stop-Loss –Ω–∞ 2% –Ω–∏–∂—á–µ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Ö —Ä—ñ–≤–Ω—ñ–≤ Take-Profit
        take_profit_1 = price * (1 + predicted_change / 100 * 0.5)  # –ü–µ—Ä—à–∏–π —Ä—ñ–≤–µ–Ω—å Take-Profit (50% –≤—ñ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É)
        take_profit_2 = price * (1 + predicted_change / 100 * 0.75)  # –î—Ä—É–≥–∏–π —Ä—ñ–≤–µ–Ω—å Take-Profit (75% –≤—ñ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É)
        take_profit_3 = price * (1 + predicted_change / 100)  # –¢—Ä–µ—Ç—ñ–π —Ä—ñ–≤–µ–Ω—å Take-Profit (100% –≤—ñ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É)
        logger.info(f"–†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: Stop-Loss: {stop_loss:.2f}, Take-Profit 1: {take_profit_1:.2f}, Take-Profit 2: {take_profit_2:.2f}, Take-Profit 3: {take_profit_3:.2f}")
        return stop_loss, take_profit_1, take_profit_2, take_profit_3
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É: {e}")
        return None, None, None, None

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: CallbackContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.username} –ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üöÄ –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à —Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /trade –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ /trade
async def trade(update: Update, context: CallbackContext):
    try:
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /trade –æ—Ç—Ä–∏–º–∞–Ω–∞.")
        markets = get_all_markets()
        if not markets:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–∏.")
            await notify_error(context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–∏.")
            return

        symbol = markets[0]  # –í–∏–±—ñ—Ä –ø–µ—Ä—à–æ—ó –ø–∞—Ä–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        timeframe = '1h'
        df = get_market_data(symbol, timeframe)
        if df is None:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ.")
            await notify_error(context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ.")
            return

        # –î–æ–¥–∞–π—Ç–µ —Ç—É—Ç –≤–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        model, scaler = train_model(df)
        if model is None:
            await notify_error(context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å.")
            return

        predicted_change = predict_price_change(model, scaler, df)
        stop_loss, take_profit_1, take_profit_2, take_profit_3 = calculate_risk_management(df['close'].iloc[-1], predicted_change)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üîç –ü—Ä–æ–≥–Ω–æ–∑ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {predicted_change:.2f}%\n"
                 f"üìâ Stop-Loss: {stop_loss:.2f}\n"
                 f"üí∞ Take-Profit 1: {take_profit_1:.2f}\n"
                 f"üí∞ Take-Profit 2: {take_profit_2:.2f}\n"
                 f"üí∞ Take-Profit 3: {take_profit_3:.2f}"
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /trade: {e}")
        await notify_error(context, f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /trade: {e}")

# –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
# application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
# application.add_handler(CommandHandler("start", start))
# application.add_handler(CommandHandler("trade", trade))
# application.run_polling()
